# -*- coding: utf-8 -*-
"""YOLOv8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z_4D76C3ByIoja9FZJTaWgWJ0pArX9_e
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install ultralytics
import ultralytics
ultralytics.checks()

# Commented out IPython magic to ensure Python compatibility.
# %pwd

# Commented out IPython magic to ensure Python compatibility.
# %cd drive/MyDrive/Mars Model

from ultralytics import YOLO

model = YOLO('yolov8s.pt')  # load a pretrained YOLOv8n detection model
model.train(data='/content/drive/MyDrive/Mars Model/mars.yaml', epochs=200, imgsz=832, lr0=0.0001, lrf=0.0001, optimizer='SGD')  # train the model

def fitness(dataframe):
  mAP50 = dataframe.iloc[:, 6]
  mAP50_95 = dataframe.iloc[:, 7]
  return 0.1*mAP50 + 0.9*mAP50_95

e20_df = pd.read_csv('runs/detect/train/results.csv')
e50_df = pd.read_csv('runs/detect/train2/results.csv')
e100_df = pd.read_csv('runs/detect/train3/results.csv')

e20_lr_df = pd.read_csv('runs/detect/train5/results.csv')
e50_lr_df = pd.read_csv('runs/detect/train6/results.csv')
e100_lr_df = pd.read_csv('runs/detect/train7/results.csv')

e20_lr_Adam_df = pd.read_csv('runs/detect/train10/results.csv')
e50_lr_Adam_df = pd.read_csv('runs/detect/train8/results.csv')
e100_lr_Adam_df = pd.read_csv('runs/detect/train9/results.csv')

e20_lr_small_Adam_df = pd.read_csv('runs/detect/train11/results.csv')
e50_lr_small_Adam_df = pd.read_csv('runs/detect/train12/results.csv')
e100_lr_small_Adam_df = pd.read_csv('runs/detect/train13/results.csv')

e100_lr_small_SGD_df = pd.read_csv('runs/detect/train14/results.csv')

df = pd.read_csv('runs/detect/train24/results.csv')

plt.figure(figsize=(30,10))
plt.title('fitness', fontsize=30)
plt.plot(fitness(df))

plt.figure(figsize=(30,10))
plt.title('val_loss', fontsize=30)
plt.plot(e100_df.iloc[:, 8], label='0.01 SGD')
plt.plot(e100_lr_df.iloc[:, 8], label='0.001 SGD')
plt.plot(e100_lr_Adam_df.iloc[:, 8], label='0.001 Adam')
plt.plot(e100_lr_small_SGD_df.iloc[:, 8], label = '0.0001 SGD')
plt.plot(e100_lr_small_Adam_df.iloc[:, 8], label = '0.0001 Adam')
plt.legend(prop={'size': 20})
plt.show()

plt.figure(figsize=(30,10))
plt.title('fitness', fontsize=30)
plt.plot(fitness(e100_df), label='0.01 SGD')
plt.plot(fitness(e100_lr_df), label='0.001 SGD')
plt.plot(fitness(e100_lr_Adam_df), label = '0.001 Adam')
plt.plot(fitness(e100_lr_small_SGD_df), label = '0.0001 SGD')
plt.plot(fitness(e100_lr_small_Adam_df), label = '0.0001 Adam')
plt.legend(prop={'size': 20})
plt.show()

model.predict(source='data/images', hide_labels=True, line_thickness=6, save=True, save_txt=True);

model.val(data="mars.yaml", plots=True, val=False)

"""We use the python library to train and use the model. The ultralytics automatically imports the latest version of yolo, we use yolov8s as the model. We tried different epochs, learning rates and optimisers, but they did not have a particularly large performance gap.

We started by dividing the training and validation sets using data.py and filling in the path to the data in dataset.yaml, setting the number of classes to 1 and the class name.

Model.train, model.predict, model.val are used for training, prediction and validation respectively. Model.train stores the best model as a best.pt file, and a file containing many matrices called result.csv. Model.predict generates predicted images and corresponding labels for the input source and stores them in the 'runs' folder. Model.val generates various data based on the validation set, including the confusion matrix, f1 curve, pr curve and a comparison image with the real label.
"""

